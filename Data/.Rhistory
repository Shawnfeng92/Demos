install.packages("Quandl")
data <- Quandl('NSE/OIL', type = "xts")
library(Quandl)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
data <- Quandl('NSE/OIL', type = "xts")
View(data)
data <- Quandl('NASDAQ/AAPL', type = "xts")
data <- Quandl('EOD/AAPL', type = "xts")
View(data)
View(data)
View(data)
library(Quandl)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
tickers <- read.delim(file = "NASDAQ.txt")
data <- c()
for(i in tickers){
data <- rbind(data, Quandl(paste0('EOD/', i), type = "xts")[,11])
}
View(data)
View(tickers)
tickers <- read.delim(file = "NASDAQ.txt")[ï¼Œ1]
tickers <- read.delim(file = "NASDAQ.txt")[,1]
library(Quandl)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
tickers <- read.delim(file = "NASDAQ.txt")[,1]
data <- c()
for(i in tickers){
data <- cbind(data, Quandl(paste0('EOD/', i), type = "xts")[,11])
}
library(Quandl)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
tickers <- read.delim(file = "NASDAQ.txt")[,1]
data <- c()
for(i in tickers){
data <- cbind(data, Quandl(paste0('EOD/', i), type = "xts")[,11])
}
Quandl("EOD/AAPL")
library(Quandl)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
tickers <- read.delim(file = "NASDAQ.txt")[,1]
data <- c()
for(i in tickers){
data <- cbind(data, Quandl(paste0('EOD/', i), type = "xts")[,11])
}
Quandl("EOD/AACG")
temp <- try(Quandl(paste0('EOD/', 'AACG'), type = "xts")[,11])
temp
temp[1]
temp[2]
temp[1]
class(temp)
library(Quandl)
Quandl.api_key("dU-ukkHjcYwUsDqmcvjB")
tickers <- read.delim(file = "NASDAQ.txt")[,1]
data <- c()
for(i in tickers){
temp <- try(Quandl(paste0('EOD/', i), type = "xts")[,11])
if(class(temp) != "try-error"){
data <- cbind(data, temp)
}
}
View(data)
if (!require(BatchGetSymbols)) install.packages('BatchGetSymbols')
library(BatchGetSymbols)
tickers <- read.delim(file = "NASDAQ.txt")[,1]
data <-
1
library(BatchGetSymbols)
tickers <- read.delim(file = "NASDAQ.txt")[,1]
data <- BatchGetSymbols(tickers = tickers,
first.date = Sys.Date() - 3650,
freq.data = "daily")
library(BatchGetSymbols)
tickers <- read.delim(file = "NASDAQ.txt")[,1]
data <- BatchGetSymbols(tickers = tickers,
first.date = Sys.Date() - 365,
freq.data = "daily")
library(BatchGetSymbols)
tickers <- read.delim(file = "NASDAQ.txt")[,1]
data <- BatchGetSymbols(tickers = GetSP500Stocks()$Tickers,
first.date = Sys.Date() - 365,
freq.data = "daily")
View(data)
data[["df.tickers"]][["price.adjusted"]]
View(data[["df.tickers"]][["price.adjusted"]])
View(data)
print(data$df.tickers)
View(data$df.tickers)
library(quantmod)
library(BatchGetSymbols)
library(quantmod)
tickers <- GetSP500Stocks()$Tickers
getSymbols(Symbols = "AAPL",
auto.assign = FALSE)
library(BatchGetSymbols)
library(quantmod)
tickers <- GetSP500Stocks()$Tickers
data <- c()
for (i in tickers) {
temp <- getSymbols(Symbols = i,
auto.assign = FALSE)[,6]
data <- cbind(data, temp)
}
View(data)
View(temp)
ncol(data)
nrow(data)
try(getSymbols(Symbols = "BRK.B",
auto.assign = FALSE)[,6])
a <- try(getSymbols(Symbols = "BRK.B",
auto.assign = FALSE)[,6])
class(a)
library(BatchGetSymbols)
library(quantmod)
tickers <- GetSP500Stocks()$Tickers
data <- c()
for (i in tickers) {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
data <- cbind(data, temp)
}
}
View(data)
ncol(data)
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
cl <- makeCluster(16)
registerDoParallel(cl)
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
cl <- makeCluster(16)
registerDoParallel(cl)
tickers <- GetSP500Stocks()$Tickers
data <- foreach(i = tickers, .combine = "cbind") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
stopCluster(cl)
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
cl <- makeCluster(16)
registerDoParallel(cl)
tickers <- GetSP500Stocks()$Tickers
data <- foreach(i = tickers, .combine = "cbind") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
stopCluster(cl)
View(data)
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
cl <- makeCluster(16)
registerDoParallel(cl)
tickers <- GetSP500Stocks()$Tickers
data <- foreach(i = tickers, .combine = "cbind", .packages = "quantmod") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
stopCluster(cl)
View(data)
colnames(data)
colnames(data) <- tickers
colnames(data) <- tickers
rm(cl)
colnames(data) <- tickers
View(data)
write.zoo(x = data, file = "SP500.csv")
# This script will download and save daily adjusted historical price for all stocks in S&P500
# from 01/03/2017 to today.
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
cl <- makeCluster(16)
registerDoParallel(cl)
tickers <- GetSP500Stocks()$Tickers
data <- foreach(i = tickers, .combine = "cbind", .packages = "quantmod") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
stopCluster(cl)
rm(cl)
colnames(data) <- tickers
write.zoo(x = data, file = "SP500.csv", sep = ",")
# This script will download and save daily adjusted historical price for all stocks in S&P500
# from 01/03/2017 to today.
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
cl <- makeCluster(16)
registerDoParallel(cl)
DataVendor <- function(tickers = GetSP500Stocks()$Tickers, location = "SP500.csv", parallel = FALSE) {
if(parallel) {
data <- foreach(i = tickers, .combine = "cbind", .packages = "quantmod") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
stopCluster(cl)
rm(cl)
colnames(data) <- tickers
write.zoo(x = data, file = location, sep = ",")
}
}
# This script will download and save daily adjusted historical price for all stocks in S&P500
# from 01/03/2017 to today.
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
cl <- makeCluster(16)
registerDoParallel(cl)
DataVendor <- function(tickers = GetSP500Stocks()$Tickers, location = "SP500.csv", parallel = FALSE) {
if(parallel) {
data <- foreach(i = tickers, .combine = "cbind", .packages = "quantmod") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
rm(cl)
colnames(data) <- tickers
write.zoo(x = data, file = location, sep = ",")
}
}
stopCluster(cl)
# This script will download and save daily adjusted historical price for all stocks in S&P500
# from 01/03/2017 to today.
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
cl <- makeCluster(16)
registerDoParallel(cl)
DataVendor <- function(tickers = GetSP500Stocks()$Tickers, location = "SP500.csv", parallel = TRUE) {
if(parallel) {
data <- foreach(i = tickers, .combine = "cbind", .packages = "quantmod") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
rm(cl)
colnames(data) <- tickers
write.zoo(x = data, file = location, sep = ",")
}
}
stopCluster(cl)
DataVendor()
cl <- makeCluster(16)
registerDoParallel(cl)
DataVendor()
# This script will download and save daily adjusted historical price for all stocks in S&P500
# from 01/03/2017 to today.
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
DataVendor <- function(tickers = GetSP500Stocks()$Tickers, location = "SP500.csv", parallel = TRUE) {
if(parallel) {
data <- foreach(i = tickers, .combine = "cbind", .packages = "quantmod") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
rm(cl)
colnames(data) <- tickers
write.zoo(x = data, file = location, sep = ",")
}
}
cl <- makeCluster(16)
registerDoParallel(cl)
DataVendor()
stopCluster(cl)
# This script will download and save daily adjusted historical price for all stocks in S&P500
# from 01/03/2017 to today.
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
DataVendor <- function(tickers = GetSP500Stocks()$Tickers, location = "SP500.csv", parallel = TRUE) {
if(parallel) {
data <- foreach(i = tickers, .combine = "cbind", .packages = "quantmod") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
rm(cl)
colnames(data) <- tickers
write.zoo(x = data, file = location, sep = ",")
}
}
cl <- makeCluster(16)
registerDoParallel(cl)
DataVendor()
DataVendor(read.delim(file = "AMEX.txt")[,1], "AMEX.csv")
DataVendor(read.delim(file = "NASDAQ.txt")[,1], "NASDAQ.csv")
DataVendor(read.delim(file = "NYSE.txt")[,1], "NYSE.csv")
stopCluster(cl)
# This script will download and save daily adjusted historical price for all stocks in ticker list
# from 01/03/2017 to today.
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
DataVendor <- function(tickers = GetSP500Stocks()$Tickers, location = "SP500.csv", parallel = TRUE) {
if(parallel) {
data <- foreach(i = tickers, .combine = "cbind", .packages = "quantmod") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
colnames(data) <- tickers
write.zoo(x = data, file = location, sep = ",")
}
}
cl <- makeCluster(16)
registerDoParallel(cl)
DataVendor()
DataVendor(read.delim(file = "AMEX.txt")[,1], "AMEX.csv")
DataVendor(read.delim(file = "NASDAQ.txt")[,1], "NASDAQ.csv")
DataVendor(read.delim(file = "NYSE.txt")[,1], "NYSE.csv")
stopCluster(cl)
# This script will download and save daily adjusted historical price for all stocks in ticker list
# from 01/03/2017 to today.
library(BatchGetSymbols)
library(quantmod)
library(doParallel)
DataVendor <- function(tickers = GetSP500Stocks()$Tickers, location = "SP500.csv", parallel = TRUE) {
if(parallel) {
data <- foreach(i = tickers, .combine = "cbind", .packages = "quantmod") %dopar% {
temp <- try(getSymbols(Symbols = i,
auto.assign = FALSE)[,6])
if(class(temp) != "try-error") {
temp
}
else {
NA
}
}
colnames(data) <- tickers
write.zoo(x = data, file = location, sep = ",")
}
}
cl <- makeCluster(16)
registerDoParallel(cl)
DataVendor()
DataVendor(read.delim(file = "AMEX.txt", stringsAsFactors = FALSE)[,1], "AMEX.csv")
DataVendor(read.delim(file = "NASDAQ.txt", stringsAsFactors = FALSE)[,1], "NASDAQ.csv")
DataVendor(read.delim(file = "NYSE.txt", stringsAsFactors = FALSE)[,1], "NYSE.csv")
stopCluster(cl)
